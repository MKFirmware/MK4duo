/**
 * MK4duo Firmware for 3D Printer, Laser and CNC
 *
 * Based on Marlin, Sprinter and grbl
 * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
 * Copyright (C) 2013 Alberto Cotronei @MagoKimbra
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * mcode
 *
 * Copyright (C) 2017 Alberto Cotronei @MagoKimbra
 */

#if ENABLED(Z_MIN_PROBE_REPEATABILITY_TEST)

  #define CODE_M48

  /**
   * M48: Z-Probe repeatability measurement function.
   *
   * Usage:
   *   M48 <P#> <X#> <Y#> <V#> <E> <L#> <S>
   *     P = Number of sampled points (4-50, default 10)
   *     X = Sample X position
   *     Y = Sample Y position
   *     V = Verbose level (0-4, default=1)
   *     E = Engage probe for each reading
   *     L = Number of legs of movement before probe
   *     S = Schizoid (Or Star if you prefer)
   *
   * This function assumes the bed has been homed.  Specifically, that a G28 command
   * as been issued prior to invoking the M48 Z-Probe repeatability measurement function.
   * Any information generated by a prior G29 Bed leveling command will be lost and need to be
   * regenerated.
   */
  inline void gcode_M48(void) {

    if (mechanics.axis_unhomed_error()) return;

    int8_t verbose_level = parser.seen('V') ? parser.value_byte() : 1;
    if (!WITHIN(verbose_level, 0, 4)) {
      SERIAL_LM(ER, "?Verbose Level not plausible (0-4).");
      return;
    }

    if (verbose_level > 0)
      SERIAL_EM("M48 Z-Probe Repeatability Test");

    int8_t n_samples = parser.seen('P') ? parser.value_byte() : 10;
    if (!WITHIN(n_samples, 4, 50)) {
      SERIAL_LM(ER, "?Sample size not plausible (4-50).");
      return;
    }

    const ProbePtRaise raise_after = parser.boolval('E') ? PROBE_PT_STOW : PROBE_PT_RAISE;

    float X_current = mechanics.current_position[X_AXIS],
          Y_current = mechanics.current_position[Y_AXIS];

    const float X_probe_location = parser.linearval('X', X_current + probe.offset[X_AXIS]),
                Y_probe_location = parser.linearval('Y', Y_current + probe.offset[Y_AXIS]);

    #if NOMECH(DELTA)
      if (!WITHIN(X_probe_location, MIN_PROBE_X, MAX_PROBE_X)) {
        out_of_range_error(PSTR("X"));
        return;
      }
      if (!WITHIN(Y_probe_location, MIN_PROBE_Y, MAX_PROBE_Y)) {
        out_of_range_error(PSTR("Y"));
        return;
      }
    #else
      if (!mechanics.position_is_reachable_by_probe(X_probe_location, Y_probe_location)) {
        SERIAL_LM(ER, "? (X,Y) location outside of probeable radius.");
        return;
      }
    #endif

    bool seen_L = parser.seen('L');
    uint8_t n_legs = seen_L ? parser.value_byte() : 0;
    if (n_legs > 15) {
      SERIAL_LM(ER, "?Number of legs in movement not plausible (0-15).");
      return;
    }
    if (n_legs == 1) n_legs = 2;

    bool schizoid_flag = parser.seen('S');
    if (schizoid_flag && !seen_L) n_legs = 7;

    /**
     * Now get everything to the specified probe point So we can safely do a
     * probe to get us close to the bed.  If the Z-Axis is far from the bed,
     * we don't want to use that as a starting point for each probe.
     */
    if (verbose_level > 2)
      SERIAL_EM("Positioning the probe...");

    // Disable bed level correction in M48 because we want the raw data when we probe
    #if HAS_LEVELING
      const bool was_enabled = bedlevel.leveling_active;
      bedlevel.set_bed_leveling_enabled(false);
    #endif

    printer.setup_for_endstop_or_probe_move();

    double mean = 0.0, sigma = 0.0, min = 99999.9, max = -99999.9, sample_set[n_samples];

    // Move to the first point, deploy, and probe
    const float t = probe.check_pt(X_probe_location, Y_probe_location, raise_after, verbose_level);
    bool probing_good = !isnan(t);

    if (probing_good) {

      randomSeed(millis());

      for (uint8_t n = 0; n < n_samples; n++) {
        if (n_legs) {
          const int dir = (random(0, 10) > 5.0) ? -1 : 1;  // clockwise or counter clockwise
          float angle = random(0, 360);
          const float radius = random(
            #if MECH(DELTA)
              (int)(0.1250000000 * mechanics.delta_probe_radius),
              (int)(0.3333333333 * mechanics.delta_probe_radius)
            #else
              5, (int)(0.125 * MIN(X_MAX_LENGTH, Y_MAX_LENGTH))
            #endif
          );

          if (verbose_level > 3) {
            SERIAL_MV("Starting radius: ", radius);
            SERIAL_MV("   angle: ", angle);
            SERIAL_MSG(" Direction: ");
            if (dir > 0) SERIAL_MSG("Counter-");
            SERIAL_EM("Clockwise");
          }

          for (uint8_t l = 0; l < n_legs - 1; l++) {
            double delta_angle;

            if (schizoid_flag)
              // The points of a 5 point star are 72 degrees apart.  We need to
              // skip a point and go to the next one on the star.
              delta_angle = dir * 2.0 * 72.0;

            else
              // If we do this line, we are just trying to move further
              // around the circle.
              delta_angle = dir * (float) random(25, 45);

            angle += delta_angle;

            while (angle > 360.0)   // We probably do not need to keep the angle between 0 and 2*PI, but the
              angle -= 360.0;       // Arduino documentation says the trig functions should not be given values
            while (angle < 0.0)     // outside of this range.   It looks like they behave correctly with
              angle += 360.0;       // numbers outside of the range, but just to be safe we clamp them.

            X_current = X_probe_location - probe.offset[X_AXIS] + cos(RADIANS(angle)) * radius;
            Y_current = Y_probe_location - probe.offset[Y_AXIS] + sin(RADIANS(angle)) * radius;

            #if MECH(DELTA)
              // If we have gone out too far, we can do a simple fix and scale the numbers
              // back in closer to the origin.
              while (!mechanics.position_is_reachable_by_probe(X_current, Y_current)) {
                X_current *= 0.8;
                Y_current *= 0.8;
                if (verbose_level > 3) {
                  SERIAL_MV("Pulling point towards center:", X_current);
                  SERIAL_EMV(", ", Y_current);
                }
              }
            #else
              X_current = constrain(X_current, X_MIN_POS, X_MAX_POS);
              Y_current = constrain(Y_current, Y_MIN_POS, Y_MAX_POS);
            #endif
            if (verbose_level > 3) {
              SERIAL_MSG("Going to:");
              SERIAL_MV(" x: ", X_current);
              SERIAL_MV(" y: ", Y_current);
              SERIAL_EMV("  z: ", mechanics.current_position[Z_AXIS]);
            }
            mechanics.do_blocking_move_to_xy(X_current, Y_current);
          } // n_legs loop
        } // n_legs

        // Probe a single point
        sample_set[n] = probe.check_pt(X_probe_location, Y_probe_location, raise_after, 0);

        // Break the loop if the probe fails
        probing_good = !isnan(sample_set[n]);
        if (!probing_good) break;

        /**
         * Get the current mean for the data points we have so far
         */
        double sum = 0.0;
        for (uint8_t j = 0; j <= n; j++) sum += sample_set[j];
        mean = sum / (n + 1);

        NOMORE(min, sample_set[n]);
        NOLESS(max, sample_set[n]);

        /**
         * Now, use that mean to calculate the standard deviation for the
         * data points we have so far
         */
        sum = 0.0;
        for (uint8_t j = 0; j <= n; j++)
          sum += sq(sample_set[j] - mean);

        sigma = SQRT(sum / (n + 1));
        if (verbose_level > 0) {
          if (verbose_level > 1) {
            SERIAL_VAL(n + 1);
            SERIAL_MV(" of ", (int)n_samples);
            SERIAL_MV(": z: ", sample_set[n], 3);
            if (verbose_level > 2) {
              SERIAL_MV(" mean: ", mean, 4);
              SERIAL_MV(" sigma: ", sigma, 6);
              SERIAL_MV(" min: ", min, 3);
              SERIAL_MV(" max: ", max, 3);
              SERIAL_MV(" range: ", max - min, 3);
            }
            SERIAL_EOL();
          }
        }

      }  // End of probe loop
    }

    STOW_PROBE();

    if (probing_good) {
      SERIAL_EM("Finished!");

      if (verbose_level > 0) {
        SERIAL_MV("Mean: ", mean, 6);
        SERIAL_MV(" Min: ", min, 3);
        SERIAL_MV(" Max: ", max, 3);
        SERIAL_MV(" Range: ", max - min, 3);
        SERIAL_EOL();
      }

      SERIAL_EMV("Standard Deviation: ", sigma, 6);
      SERIAL_EOL();
    }

    printer.clean_up_after_endstop_or_probe_move();

    // Re-enable bed level correction if it had been on
    #if HAS_LEVELING
      bedlevel.set_bed_leveling_enabled(was_enabled);
    #endif

    mechanics.report_current_position();
  }

#endif // ENABLED(Z_MIN_PROBE_REPEATABILITY_TEST)
